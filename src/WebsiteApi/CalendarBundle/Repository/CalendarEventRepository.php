<?php

namespace WebsiteApi\CalendarBundle\Repository;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CalendarEventRepository extends \Doctrine\ORM\EntityRepository
{

    public function removeAllByCalendar($calendar){
        $qb = $this->createQueryBuilder('e');
        $qb->delete();
        $qb->where('e.calendar = :calendar');
        $qb->setParameter('calendar', $calendar);
        $q = $qb->getQuery();

        return $q->getResult();
    }

    public function getCalendarsEventsBy($from, $to, $calendarsId){

        $qb = $this->createQueryBuilder('e');
        $qb->where($qb->expr()->gte('e.to', '?1'));
        $qb->andWhere($qb->expr()->lte('e.from', '?2'));
        $qb->andWhere($qb->expr()->in('e.calendar', '?3'));
        $qb->setParameter(1, $from);
        $qb->setParameter(2, $to);
        $qb->setParameter(3, $calendarsId);
        $q= $qb->getQuery();

        return $q->getResult();
    }

    public function toRemind()
    {
        $qb = $this->createQueryBuilder('e');
        $qb->where($qb->expr()->neq('e.nextReminder', '0'));
        $qb->andWhere($qb->expr()->lte('e.nextReminder', date("U")));
        $q = $qb->getQuery();

        return $q->getResult();
    }

    public function getAllCalendarEventsByCalendar($calendarId){
        $qb = $this->createQueryBuilder(e);
        $qb->where($qb->expr()->in('e.calendar', '?1'))
            ->setParameter(1, $calendarId);
        $q= $qb->getQuery();

        return $q->getResult();
    }

}