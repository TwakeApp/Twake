<?php

namespace WebsiteApi\DriveBundle\Repository;
use Doctrine\Common\Collections\Criteria;

/**
 * DriveFileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DriveFileRepository extends \WebsiteApi\CoreBundle\Services\DoctrineAdapter\RepositoryAdapter
{

    public function sumSize($group, $directory = null)
    {

        try {
            $qb = $this->createQueryBuilder('f')
                ->select('sum(f.size)');
            if ($directory == null) {
                $qb = $qb->where('f.root_group_folder = :group')
                    ->setParameter("group", $group->getId());
            } else {
                $qb = $qb->where('f.parent = :directory')
                    ->setParameter("directory", $directory);
            }

            return $qb->getQuery()->getSingleScalarResult();
        } catch (\Exception $e) {

        }
        return 0;
    }

    public function sumSizeByExt($group)
    {
        return Array();
    }

    public function listDirectory($group, $directory = null, $trash = false, $detached = false)
    {

        if ($directory){

            $res = $this->findBy(Array(
                "parent" => $directory
            ));

        } else {

            if (!$group) {
                return Array();
            }

            $res = $this->findBy(Array(
                "root_group_folder" => $group->getId()
            ));

        }

        $objects = Array();
        foreach ($res as $file) {
            if (($file->getIsInTrash() == $trash) && ($file->getDetachedFile() == $detached) && !$file->getCopyOf()) {
                $objects[] = $file;
            }
        }

        return $objects;

    }

    public function search($group, $query, $sorts, $offset = 0, $max = 20)
    {
        $qb = $this->createQueryBuilder('f')
            ->select('f')
            ->where('f.group = :group')
            ->andWhere('f.isInTrash = 0')
            ->andWhere('f.detached_file = 0');

        foreach ($sorts as $key=>$sort){
            $qb = $qb->addOrderBy("f.".$key, $sort);
        }

        //Query search
        if(is_string($query)) {
            $query = str_replace(Array("%", "_"),Array("!%","!_"), $query);
            $qb = $qb->andWhere($qb->expr()->like("f.name", ":query"));
            $qb = $qb->setParameter("query", "%".$query."%");
        }

        $qb = $qb->setParameter("group", $group);

        $qb = $qb->setMaxResults($max);
        $qb = $qb->setFirstResult($offset);

        return $qb->getQuery()->getResult();
    }

    public function shared($workspace)
    {
        $criteria = Criteria::create();
        $criteria->where(Criteria::expr()->neq('copyOf', null));
        $criteria->orWhere(Criteria::expr()->eq('shared', true));
        $criteria->andWhere(Criteria::expr()->eq('group', $workspace));
        return  $this->matching( $criteria);
    }

    public function countEachExtension(){
        $req = $this->createQueryBuilder('f')
            ->select('f.extension, count(f.extension) AS nb')
            ->where('f.isDirectory = false')
            ->groupBy('f.extension')
            ->orderBy('nb', 'DESC');
        return $req->getQuery()->getResult();
    }

    public function countEachExtensionByWorkspace($group){
        $req = $this->createQueryBuilder('f')
            ->select('f.extension, count(f.extension) AS nb')
            ->where('f.group = \'' . $group . '\'')
            ->andWhere('f.isDirectory = false')
            ->groupBy('f.extension')
            ->orderBy('nb','DESC');
        return $req->getQuery()->getResult();
    }

    public function decreaseOpeningRate(){
        $req = $this->createQueryBuilder('f')
            ->update()
            ->set('f.opening_rate', 'f.opening_rate*0.8');
        $req->getQuery()->execute();
    }

}
