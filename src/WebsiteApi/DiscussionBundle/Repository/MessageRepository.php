<?php

namespace WebsiteApi\DiscussionBundle\Repository;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends \WebsiteApi\CoreBundle\Services\DoctrineAdapter\RepositoryAdapter
{

	public function removeStream($stream){
		$qb = $this->createQueryBuilder('s');
		$qb->delete();
        $qb->where('s.streamreciever = :streamreciever');
        $qb->setParameter('streamreciever', $stream);
        $qb->getQuery()->execute();
	}

	public function findMessageBy($param){
		if(isset($param["dateStart"]) && $param["dateStart"] != null){
			$dateStart = new \DateTime($param["dateStart"]." 00:00:00");
		}
		else{
			$dateStart = new \DateTime("1/1/1980 00:00:00");
		}

		if(isset($param["dateEnd"]) && $param["dateEnd"] != null){
			$dateEnd = new \DateTime($param["dateEnd"]." 00:00:00");
		}
		else{
			$dateEnd = new \DateTime("1/1/2300 00:00:00");
		}
		$qb = $this->createQueryBuilder("e");

		if(isset($param["idDiscussion"]) && $param["idDiscussion"]!=null){
            $qb->where('e.streamreciever = :id')
            ->setParameter('id', $param["idDiscussion"]);
        }

        if(isset($param["idUser"]) && $param["idUser"]!=null){
            $qb->where('e.userSender= :id OR e.userReciever=:id')
            ->setParameter('id', $param["idUser"]);
        }

        $qb->andWhere('e.cleanContent LIKE :content')
        ->setParameter('content', '%'.$param["content"].'%' );

		$qb->andWhere('e.date BETWEEN :from AND :to')
        ->setParameter('from', $dateStart )
        ->setParameter('to', $dateEnd);

        if(isset($param["from"]) && $param["from"] != null){
        	$qb->andWhere('e.userSender = :idSender')
        	->setParameter('idSender',$param["from"]);
        }
        if(isset($param["application"]) && $param["application"]!=null){
            $qb->andWhere('e.isApplicationMessage = 1');
            $qb->andWhere('e.applicationSender = :applicationSender');
            $qb->setParameter('applicationSender',$param["application"]);
        }

		$qb->setMaxResults( 50 );

		$result = $qb->getQuery()->getResult();

	    return $result;
	}

	public function getMessageNotOwner($userId,$streamId,$limit){
        $qb = $this->createQueryBuilder("m");
        $qb->where('m.userSender != :idUser');
        $qb->andWhere("m.streamreciever=:idStream");
        $qb->setParameter("idUser",$userId);
        $qb->setParameter("idStream",$streamId);
        $qb->orderBy("m.date","DESC");
        $qb->setMaxResults($limit);
        $result = $qb->getQuery()->getResult();
        return $result;
    }

    public function findWithOffsetId($streamId, $maxId, $subjectId, $maxResult = 50)
    {

        $qb = $this->createQueryBuilder("m");
        $qb->andWhere("m.streamreciever = :streamId")
            ->setParameter("streamId", $streamId);

        $qb->andWhere("m.responseto IS NULL");

        if($subjectId){
            $qb->andWhere("m.subject = :subject")
                ->setParameter("subject", $subjectId);
        }

        //TODO WILL NOT WORK
        if($maxId>=0){
            $qb->andWhere("m.id < :max")
                ->setParameter("max",($maxId-1));
        }

        $qb->orderBy('m.date', 'DESC');
        $qb->setMaxResults($maxResult);
        $result = $qb->getQuery()->getResult();

        array_reverse($result);

        return $result;
    }

    public function findResponsesOf($headIds, $streamId, $subjectId)
    {

        if (count($headIds) == 0) {
            return Array();
        }

        $qb = $this->createQueryBuilder("m");
        $qb->andWhere("m.streamreciever = :streamId")
            ->setParameter("streamId", $this->queryBuilderUuid($streamId));

        $qb->andWhere("m.responseto IN (" . join(",", $this->queryBuilderUuid($headIds)) . ")");

        if ($subjectId) {
            $qb->andWhere("m.subject = :subject")
                ->setParameter("subject", $this->queryBuilderUuid($subjectId));
        }

        $qb->orderBy('m.date', 'ASC');
        $result = $qb->getQuery()->getResult();

        return $result;
    }

//    public function getMessagesByKey($key,$limit){
//	    $ids = explode("_",$key);
//        $qb = $this->createQueryBuilder("m");
//        if(count($ids)>1){ //user
//            $qb->where('m.userSender = :idUser1 AND m.userReciever = :idUser2');
//            $qb->orWhere('m.userSender = :idUser2 AND m.userReciever = :idUser1');
//            $qb->setParameter('idUser1', $ids[0]);
//            $qb->setParameter('idUser2', $ids[1]);
//        }
//        else{ // stream
//            $qb->where('m.streamreciever = idStream');
//            $qb->setParameter("idStream",$ids[0]);
//        }
//        $qb->orderBy("m.date","DESC");
//        $qb->setMaxResults($limit);
//        $result = $qb->getQuery()->getResult();
//        return $result;
//    }

}
