<?php

namespace WebsiteApi\DiscussionBundle\Repository;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends \Doctrine\ORM\EntityRepository
{
	public function findMessageBy($param){
		if($param["dateStart"] != null){
			$dateStart = new \DateTime($param["dateStart"]." 00:00:00");
		}
		else{
			$dateStart = new \DateTime("1/1/1980 00:00:00");
		}

		if($param["dateEnd"] != null){
			$dateEnd = new \DateTime($param["dateEnd"]." 00:00:00");
		}
		else{
			$dateEnd = new \DateTime("1/1/2300 00:00:00");
		}
		$qb = $this->createQueryBuilder("e");

		$qb->where('e.streamReciever = :id')
        ->setParameter('id', $param["idDiscussion"]);

		$qb->andWhere('e.cleanContent LIKE :content')
        ->setParameter('content', '%'.$param["content"].'%' );

		$qb->andWhere('e.date BETWEEN :from AND :to')
        ->setParameter('from', $dateStart )
        ->setParameter('to', $dateEnd);

        if($param["from"] != null){
        	$qb->andWhere('e.userSender = :idSender')
        	->setParameter('idSender',$param["from"]);
        }

        $result = $qb->getQuery()->getResult();

	    return $result;
	}

	public function getMessageNotOwner($userId,$streamId,$limit){
        $qb = $this->createQueryBuilder("m");
        $qb->where('m.userSender != :idUser');
        $qb->andWhere("m.streamReciever = :idStream");
        $qb->setParameter("idUser",$userId);
        $qb->setParameter("idStream",$streamId);
        $qb->orderBy("m.date","DESC");
        $qb->setMaxResults($limit);
        $result = $qb->getQuery()->getResult();
        return $result;
    }

//    public function getMessagesByKey($key,$limit){
//	    $ids = explode("_",$key);
//        $qb = $this->createQueryBuilder("m");
//        if(count($ids)>1){ //user
//            $qb->where('m.userSender = :idUser1 AND m.userReciever = :idUser2');
//            $qb->orWhere('m.userSender = :idUser2 AND m.userReciever = :idUser1');
//            $qb->setParameter('idUser1', $ids[0]);
//            $qb->setParameter('idUser2', $ids[1]);
//        }
//        else{ // stream
//            $qb->where('m.streamReciever = idStream');
//            $qb->setParameter("idStream",$ids[0]);
//        }
//        $qb->orderBy("m.date","DESC");
//        $qb->setMaxResults($limit);
//        $result = $qb->getQuery()->getResult();
//        return $result;
//    }

}
